{"version":3,"file":"static/js/683.ee0e711f.chunk.js","mappings":";8JAaA,SAASA,IAGP,OAAO,wDADO,KAIhB,SAASC,IAIP,OAAO,mBAAQC,QADG,aACX,6BAgBT,UAbA,WACE,OACE,4BAKE,SAACF,EAAD,KACA,SAACC,EAAD,8BCzBO,IAAIE,EAAEC,EAAQ,MAASC,EAAEC,OAAM,IAAK,iBAAiBC,EAAED,OAAM,IAAK,kBAAkBE,EAAEC,OAAOC,UAAUC,eAAeC,EAAET,EAAEU,mDAAmDC,kBAAkBC,EAAE,CAACC,KAAI,EAAGC,KAAI,EAAGC,QAAO,EAAGC,UAAS,GAChP,SAASC,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAiF,IAAIH,UAAhF,IAASD,IAAIG,EAAE,GAAGH,QAAG,IAASD,EAAEN,MAAMU,EAAE,GAAGJ,EAAEN,UAAK,IAASM,EAAEL,MAAMU,EAAEL,EAAEL,KAAcK,EAAEd,EAAEoB,KAAKN,EAAEE,KAAKT,EAAEJ,eAAea,KAAKC,EAAED,GAAGF,EAAEE,IAAI,GAAGH,GAAGA,EAAEQ,aAAa,IAAIL,KAAKF,EAAED,EAAEQ,kBAAe,IAASJ,EAAED,KAAKC,EAAED,GAAGF,EAAEE,IAAI,MAAM,CAACM,SAASzB,EAAE0B,KAAKV,EAAEL,IAAIU,EAAET,IAAIU,EAAEK,MAAMP,EAAEQ,OAAOrB,EAAEsB,SAASC,EAAQC,SAAS7B,EAAE4B,EAAQE,IAAIjB,EAAEe,EAAQG,KAAKlB,wBCPxWmB,EAAOJ,QAAU,EAAjBI","sources":["exercise/03.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["// useContext: simple Counter\n// http://localhost:3000/isolated/exercise/03.js\n\nimport * as React from 'react'\n\n// üê® create your CountContext here with React.createContext\n\n// üê® create a CountProvider component here that does this:\n//   üê® get the count state and setCount updater with React.useState\n//   üê® create a `value` array with count and setCount\n//   üê® return your context provider with the value assigned to that array and forward all the other props\n//   üí∞ more specifically, we need the children prop forwarded to the context provider\n\nfunction CountDisplay() {\n  // üê® get the count from useContext with the CountContext\n  const count = 0\n  return <div>{`The current count is ${count}`}</div>\n}\n\nfunction Counter() {\n  // üê® get the setCount from useContext with the CountContext\n  const setCount = () => {}\n  const increment = () => setCount(c => c + 1)\n  return <button onClick={increment}>Increment count</button>\n}\n\nfunction App() {\n  return (\n    <div>\n      {/*\n        üê® wrap these two components in the CountProvider so they can access\n        the CountContext value\n      */}\n      <CountDisplay />\n      <Counter />\n    </div>\n  )\n}\n\nexport default App\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["CountDisplay","Counter","onClick","f","require","k","Symbol","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}