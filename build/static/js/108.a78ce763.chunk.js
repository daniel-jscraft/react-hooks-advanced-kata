/*! For license information please see 108.a78ce763.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkadvanced_react_hooks=self.webpackChunkadvanced_react_hooks||[]).push([[108],{5108:function(e,n,s){s.r(n);var a=s(2556);function c(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",h3:"h3",pre:"pre",span:"span",a:"a",strong:"strong",ul:"ul",li:"li",em:"em"},e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"useCallback: custom hooks"}),"\n",(0,a.jsx)(n.h2,{children:"\ud83d\udcdd Your Notes"}),"\n",(0,a.jsxs)(n.p,{children:["Elaborate on your learnings here in ",(0,a.jsx)(n.code,{children:"src/exercise/02.md"})]}),"\n",(0,a.jsx)(n.h2,{children:"Background"}),"\n",(0,a.jsx)(n.h3,{children:"Memoization in general"}),"\n",(0,a.jsx)(n.p,{children:"Memoization: a performance optimization technique which eliminates the need to\nrecompute a value for a given input by storing the original computation and\nreturning that stored value when the same input is provided. Caching is a form\nof memoization. Here's a simple implementation of memoization:"}),"\n",(0,a.jsx)(n.pre,{className:"language-typescript",children:(0,a.jsxs)(n.code,{className:"language-typescript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," values ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"addOne"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"num",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token builtin",children:"number"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"values",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"num",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"==="})," ",(0,a.jsx)(n.span,{className:"token keyword nil",children:"undefined"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    values",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"num",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," num ",(0,a.jsx)(n.span,{className:"token operator",children:"+"})," ",(0,a.jsx)(n.span,{className:"token number",children:"1"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// <-- here's the computation"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," values",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"num",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"One other aspect of memoization is value referential equality. For example:"}),"\n",(0,a.jsx)(n.pre,{className:"language-typescript",children:(0,a.jsxs)(n.code,{className:"language-typescript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," dog1 ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token keyword",children:"new"})," ",(0,a.jsx)(n.span,{className:"token class-name",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Dog"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'sam'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," dog2 ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token keyword",children:"new"})," ",(0,a.jsx)(n.span,{className:"token class-name",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Dog"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'sam'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token console class-name",children:"console"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"log"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"dog1 ",(0,a.jsx)(n.span,{className:"token operator",children:"==="})," dog2",(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// false"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"Even though those two dogs have the same name, they are not the same. However,\nwe can use memoization to get the same dog:"}),"\n",(0,a.jsx)(n.pre,{className:"language-typescript",children:(0,a.jsxs)(n.code,{className:"language-typescript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," dogs ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"getDog"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"name",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token builtin",children:"string"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"dogs",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"name",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"==="})," ",(0,a.jsx)(n.span,{className:"token keyword nil",children:"undefined"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    dogs",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"name",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token keyword",children:"new"})," ",(0,a.jsx)(n.span,{className:"token class-name",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Dog"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"name",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," dogs",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"name",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," dog1 ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"getDog"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'sam'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," dog2 ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"getDog"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'sam'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token console class-name",children:"console"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"log"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"dog1 ",(0,a.jsx)(n.span,{className:"token operator",children:"==="})," dog2",(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// true"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"You might have noticed that our memoization examples look very similar.\nMemoization is something you can implement as a generic abstraction:"}),"\n",(0,a.jsx)(n.pre,{className:"language-typescript",children:(0,a.jsxs)(n.code,{className:"language-typescript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsxs)(n.span,{className:"token generic-function",children:[(0,a.jsx)(n.span,{className:"token function",children:"memoize"}),(0,a.jsxs)(n.span,{className:"token generic class-name",children:[(0,a.jsx)(n.span,{className:"token operator",children:"<"}),(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ArgType"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ReturnValue"}),(0,a.jsx)(n.span,{className:"token operator",children:">"})]})]}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token function-variable function",children:"cb"}),(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"arg",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ArgType"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ReturnValue"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," cache",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Record"}),(0,a.jsx)(n.span,{className:"token operator",children:"<"}),(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ArgType"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ReturnValue"}),(0,a.jsx)(n.span,{className:"token operator",children:">"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," ",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"memoized"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"arg",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ArgType"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"cache",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"arg",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"==="})," ",(0,a.jsx)(n.span,{className:"token keyword nil",children:"undefined"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n      cache",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"arg",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"cb"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"arg",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n    ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," cache",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"arg",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," addOne ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"memoize"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"num",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token builtin",children:"number"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," num ",(0,a.jsx)(n.span,{className:"token operator",children:"+"})," ",(0,a.jsx)(n.span,{className:"token number",children:"1"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," getDog ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"memoize"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"name",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token builtin",children:"string"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token keyword",children:"new"})," ",(0,a.jsx)(n.span,{className:"token class-name",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Dog"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"name",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"Our abstraction only supports one argument, if you want to make it work for any\ntype/number of arguments, knock yourself out."}),"\n",(0,a.jsx)(n.h3,{children:"Memoization in React"}),"\n",(0,a.jsxs)(n.p,{children:["Luckily, in React we don't have to implement a memoization abstraction. They\nmade two for us! ",(0,a.jsx)(n.code,{children:"useMemo"})," and ",(0,a.jsx)(n.code,{children:"useCallback"}),". For more on this read:\n",(0,a.jsx)(n.a,{href:"https://epicreact.dev/memoization-and-react",children:"Memoization and React"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You know the dependency list of ",(0,a.jsx)(n.code,{children:"useEffect"}),"? Here's a quick refresher:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// <-- that's the dependency list"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"Remember that the dependency list is how React knows whether to call your\ncallback (and if you don't provide one then React will call your callback every\nrender). It does this to ensure that the side effect you're performing in the\ncallback doesn't get out of sync with the state of the application."}),"\n",(0,a.jsx)(n.p,{children:"But what happens if I use a function in my callback?"}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," ",(0,a.jsx)(n.span,{className:"token function-variable function",children:"updateLocalStorage"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token function",children:"updateLocalStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// <-- what goes in that dependency list?"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["We could just put the ",(0,a.jsx)(n.code,{children:"count"})," in the dependency list and that would\nactually/accidentally work, but what would happen if one day someone were to\nchange ",(0,a.jsx)(n.code,{children:"updateLocalStorage"}),"?"]}),"\n",(0,a.jsx)(n.pre,{className:"language-diff",children:(0,a.jsxs)(n.code,{className:"language-diff",children:[(0,a.jsxs)(n.span,{className:"token deleted-sign deleted",children:[(0,a.jsx)(n.span,{className:"token prefix deleted",children:"-"}),(0,a.jsx)(n.span,{className:"token line",children:" const updateLocalStorage = () => window.localStorage.setItem('count', count)\n"})]}),(0,a.jsxs)(n.span,{className:"token inserted-sign inserted",children:[(0,a.jsx)(n.span,{className:"token prefix inserted",children:"+"}),(0,a.jsx)(n.span,{className:"token line",children:" const updateLocalStorage = () => window.localStorage.setItem(key, count)\n"})]})]})}),"\n",(0,a.jsxs)(n.p,{children:["Would we remember to update the dependency list to include the ",(0,a.jsx)(n.code,{children:"key"}),"? Hopefully\nwe would. But this can be a pain to keep track of dependencies. Especially if\nthe function that we're using in our ",(0,a.jsx)(n.code,{children:"useEffect"})," callback is coming to us from\nprops (in the case of a custom component) or arguments (in the case of a custom\nhook)."]}),"\n",(0,a.jsx)(n.p,{children:"Instead, it would be much easier if we could just put the function itself in the\ndependency list:"}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," ",(0,a.jsx)(n.span,{className:"token function-variable function",children:"updateLocalStorage"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token function",children:"updateLocalStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"updateLocalStorage",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// <-- function as a dependency"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["The problem with that though it will trigger the ",(0,a.jsx)(n.code,{children:"useEffect"})," to run every\nrender. This is because ",(0,a.jsx)(n.code,{children:"updateLocalStorage"})," is defined inside the component\nfunction body. So it's re-initialized every render. Which means it's brand new\nevery render. Which means it changes every render. Which means... you guessed\nit, our ",(0,a.jsx)(n.code,{children:"useEffect"})," callback will be called every render!"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["This is the problem ",(0,a.jsx)(n.code,{children:"useCallback"})," solves"]}),". And here's how you solve it"]}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," updateLocalStorage ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token comment",children:"// <-- yup! That's a dependency list!"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token function",children:"updateLocalStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"updateLocalStorage",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"What that does is we pass React a function and React gives that same function\nback to us... Sounds kinda useless right? Imagine:"}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token comment",children:"// this is not how React actually implements this function. We're just imagining!"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"useCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token parameter",children:"callback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," callback\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})}),"\n",(0,a.jsx)(n.p,{children:"Uhhh... But there's a catch! On subsequent renders, if the elements in the\ndependency list are unchanged, instead of giving the same function back that we\ngive to it, React will give us the same function it gave us last time. So\nimagine:"}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token comment",children:"// this is not how React actually implements this function. We're just imagining!"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"let"})," lastCallback\n",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"useCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsxs)(n.span,{className:"token parameter",children:["callback",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," deps"]}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token function",children:"depsChanged"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"deps",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    lastCallback ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," callback\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," callback\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"})," ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"else"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," lastCallback\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["So while we still create a new function every render (to pass to ",(0,a.jsx)(n.code,{children:"useCallback"}),"),\nReact only gives us the new one if the dependency list changes."]}),"\n",(0,a.jsxs)(n.p,{children:["In this exercise, we're going to be using ",(0,a.jsx)(n.code,{children:"useCallback"}),", but ",(0,a.jsx)(n.code,{children:"useCallback"})," is\njust a shortcut to using ",(0,a.jsx)(n.code,{children:"useMemo"})," for functions:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-typescript",children:(0,a.jsxs)(n.code,{className:"language-typescript",children:[(0,a.jsx)(n.span,{className:"token comment",children:"// the useMemo version:"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," updateLocalStorage ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useMemo"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"\n  ",(0,a.jsx)(n.span,{className:"token comment",children:"// useCallback saves us from this annoying double-arrow function thing:"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n\n",(0,a.jsx)(n.span,{className:"token comment",children:"// the useCallback version"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," updateLocalStorage ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token dom variable",children:"window"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"localStorage"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"setItem"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token string",children:"'count'"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," count",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["\ud83e\udd89 A common question with this is: \"Why don't we just wrap every function in\n",(0,a.jsx)(n.code,{children:"useCallback"}),'?" You can read about this in my blog post\n',(0,a.jsx)(n.a,{href:"https://kentcdodds.com/blog/usememo-and-usecallback",children:"When to useMemo and useCallback"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:['\ud83e\udd89 And if the concept of a "closure" is new or confusing to you, then\n',(0,a.jsx)(n.a,{href:"https://mdn.io/closure",children:"give this a read"}),". (Closures are one of the reasons\nit's important to keep dependency lists correct.)"]}),"\n",(0,a.jsx)(n.h2,{children:"Exercise"}),"\n",(0,a.jsx)(n.p,{children:"Production deploys:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://advanced-react-hooks.netlify.com/isolated/exercise/02.js",children:"Exercise"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://advanced-react-hooks.netlify.com/isolated/final/02.js",children:"Final"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"People tend to find this exercise more difficult,"})," so I strongly advise\nspending some time understanding how the code works before making any changes!"]}),"\n",(0,a.jsxs)(n.p,{children:["Also, one thing to keep in mind is that React hooks are a great foundation upon\nwhich to build libraries and many have been built. For that reason, you don't\noften need to go this deep into making custom hooks. So if you find this one\nisn't clicking for you, know that you ",(0,a.jsx)(n.em,{children:"are"})," learning and when you ",(0,a.jsx)(n.em,{children:"do"})," face a\nsituation when you need to use this knowledge, you'll be able to come back and\nit will click right into place."]}),"\n",(0,a.jsx)(n.p,{children:"\ud83d\udc68\u200d\ud83d\udcbc Peter the Product Manager told us that we've got more features coming our way\nthat will require managing async state. We've already got some code for our\npokemon lookup feature (if you've gone through the \"React Hooks\" workshop\nalready, then this should be familiar, if not, spend some time playing with the\napp to get up to speed with what we're dealing with here). We're going to\nrefactor out the async logic so we can reuse this in other areas of the app."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"So, your job is"})," to extract the logic from the ",(0,a.jsx)(n.code,{children:"PokemonInfo"})," component into a\ncustom and generic ",(0,a.jsx)(n.code,{children:"useAsync"})," hook. In the process you'll find you need to do\nsome fancy things with dependencies (dependency arrays are the biggest challenge\nto deal with when making custom hooks)."]}),"\n",(0,a.jsxs)(n.p,{children:["NOTE: In this part of the exercise, we don't need ",(0,a.jsx)(n.code,{children:"useCallback"}),". We'll add it in\nthe extra credits. It's important that you work on this refactor first so\nyou can appreciate the value ",(0,a.jsx)(n.code,{children:"useCallback"})," provides in certain circumstances."]}),"\n",(0,a.jsx)(n.h2,{children:"Extra Credit"}),"\n",(0,a.jsx)(n.h3,{children:"1. \ud83d\udcaf use useCallback to empower the user to customize memoization"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://advanced-react-hooks.netlify.com/isolated/final/02.extra-1.js",children:"Production deploy"})}),"\n",(0,a.jsxs)(n.p,{children:["Unfortunately, the ESLint plugin is unable to determine whether the\n",(0,a.jsx)(n.code,{children:"dependencies"})," argument is a valid argument for ",(0,a.jsx)(n.code,{children:"useEffect"})," which is a shame,\nand normally I'd say just ignore it and move on. But, there's another solution\nto this problem which I think is probably better."]}),"\n",(0,a.jsxs)(n.p,{children:["Instead of accepting ",(0,a.jsx)(n.code,{children:"dependencies"})," to ",(0,a.jsx)(n.code,{children:"useAsync"}),", why don't we just treat the\n",(0,a.jsx)(n.code,{children:"asyncCallback"})," as a dependency? Any time ",(0,a.jsx)(n.code,{children:"asyncCallback"})," changes, we know that\nwe should call it again. The problem is that because our ",(0,a.jsx)(n.code,{children:"asyncCallback"})," depends\non the ",(0,a.jsx)(n.code,{children:"pokemonName"})," which comes from props, it has to be defined within the\nbody of the component, which means that it will be defined on every render which\nmeans it will be new every render. This is where ",(0,a.jsx)(n.code,{children:"React.useCallback"})," comes in!"]}),"\n",(0,a.jsxs)(n.p,{children:["Here's another example of the ",(0,a.jsx)(n.code,{children:"React.useCallback"})," API:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"ConsoleGreeting"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token parameter",children:"props"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," greet ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"\n    ",(0,a.jsx)(n.span,{className:"token parameter",children:"greeting"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token console class-name",children:"console"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"log"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsxs)(n.span,{className:"token template-string",children:[(0,a.jsx)(n.span,{className:"token template-punctuation string",children:"`"}),(0,a.jsxs)(n.span,{className:"token interpolation",children:[(0,a.jsx)(n.span,{className:"token interpolation-punctuation punctuation",children:"${"}),"greeting",(0,a.jsx)(n.span,{className:"token interpolation-punctuation punctuation",children:"}"})]}),(0,a.jsx)(n.span,{className:"token string",children:" "}),(0,a.jsxs)(n.span,{className:"token interpolation",children:[(0,a.jsx)(n.span,{className:"token interpolation-punctuation punctuation",children:"${"}),"props",(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"name"}),(0,a.jsx)(n.span,{className:"token interpolation-punctuation punctuation",children:"}"})]}),(0,a.jsx)(n.span,{className:"token template-punctuation string",children:"`"})]}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n    ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"props",(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token property-access",children:"name"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n\n  ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," helloGreeting ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token string",children:"'Hello'"}),"\n    ",(0,a.jsx)(n.span,{className:"token function",children:"greet"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"helloGreeting",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"greet",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"<"}),"div",(0,a.jsx)(n.span,{className:"token operator",children:">"}),"check the console",(0,a.jsx)(n.span,{className:"token operator",children:"<"}),(0,a.jsx)(n.span,{className:"token operator",children:"/"}),"div",(0,a.jsx)(n.span,{className:"token operator",children:">"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["The first argument to ",(0,a.jsx)(n.code,{children:"useCallback"})," is the callback you want called, the second\nargument is an array of dependencies which is similar to ",(0,a.jsx)(n.code,{children:"useEffect"}),". When one\nof the dependencies changes between renders, the callback you passed in the\nfirst argument will be the one returned from ",(0,a.jsx)(n.code,{children:"useCallback"}),". If they do not\nchange, then you'll get the callback which was returned the previous time (so\nthe callback remains the same between renders)."]}),"\n",(0,a.jsxs)(n.p,{children:["So we only want our ",(0,a.jsx)(n.code,{children:"asyncCallback"})," to change when the ",(0,a.jsx)(n.code,{children:"pokemonName"})," changes.\nSee if you can make things work like this:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token comment",children:"// \ud83d\udc28 you'll need to wrap asyncCallback in React.useCallback"}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:"asyncCallback"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token operator",children:"!"}),"pokemonName",(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," ",(0,a.jsx)(n.span,{className:"token function",children:"fetchPokemon"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"pokemonName",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n\n",(0,a.jsx)(n.span,{className:"token comment",children:"// \ud83d\udc28 you'll need to update useAsync to remove the dependencies and list the"}),"\n",(0,a.jsx)(n.span,{className:"token comment",children:"// async callback as a dependency."}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," state ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"useAsync"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"asyncCallback",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n"]})}),"\n",(0,a.jsxs)(n.h3,{children:["2. \ud83d\udcaf return a memoized ",(0,a.jsx)(n.code,{children:"run"})," function from useAsync"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://advanced-react-hooks.netlify.com/isolated/final/02.extra-2.js",children:"Production deploy"})}),"\n",(0,a.jsx)(n.p,{children:"Requiring users to provide a memoized value is fine. You can document it as part\nof the API and expect people to just read the docs right? lol, that's hilarious\n\ud83d\ude02 It'd be WAY better if we could redesign the API a bit so we (as the hook\ndevelopers) are the ones who have to memoize the function, and the users of our\nhook don't have to worry about it."}),"\n",(0,a.jsxs)(n.p,{children:["So see if you can redesign this a little bit by providing a (memoized) ",(0,a.jsx)(n.code,{children:"run"}),"\nfunction that people can call in their own ",(0,a.jsx)(n.code,{children:"useEffect"})," like this:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-javascript",children:(0,a.jsxs)(n.code,{className:"language-javascript",children:[(0,a.jsx)(n.span,{className:"token comment",children:"// \ud83d\udcb0 destructuring this here now because it just felt weird to call this"}),"\n",(0,a.jsx)(n.span,{className:"token comment",children:'// "state" still when it\'s also returning a function called "run" \ud83d\ude43'}),"\n",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),(0,a.jsx)(n.span,{className:"token literal-property property",children:"data"}),(0,a.jsx)(n.span,{className:"token operator",children:":"})," pokemon",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," status",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," error",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," run",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"useAsync"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"{"})," ",(0,a.jsx)(n.span,{className:"token literal-property property",children:"status"}),(0,a.jsx)(n.span,{className:"token operator",children:":"})," pokemonName ",(0,a.jsx)(n.span,{className:"token operator",children:"?"})," ",(0,a.jsx)(n.span,{className:"token string",children:"'pending'"})," ",(0,a.jsx)(n.span,{className:"token operator",children:":"})," ",(0,a.jsx)(n.span,{className:"token string",children:"'idle'"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n\n",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useEffect"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"if"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token operator",children:"!"}),"pokemonName",(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"}),"\n  ",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n  ",(0,a.jsx)(n.span,{className:"token comment",children:"// \ud83d\udcb0 note the absence of `await` here. We're literally passing the promise"}),"\n  ",(0,a.jsx)(n.span,{className:"token comment",children:"// to `run` so `useAsync` can attach it's own `.then` handler on it to keep"}),"\n  ",(0,a.jsx)(n.span,{className:"token comment",children:"// track of the state of the promise."}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," pokemonPromise ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token function",children:"fetchPokemon"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"pokemonName",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token function",children:"run"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"pokemonPromise",(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"pokemonName",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," run",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n"]})}),"\n",(0,a.jsx)(n.h3,{children:"3. \ud83d\udcaf make safeDispatch with useCallback, useRef, and useEffect"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://advanced-react-hooks.netlify.com/isolated/final/02.extra-3.js",children:"Production deploy"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NOTICE: Things have changed slightly."})," The app you're running the exercises\nin was changed since the videos were recorded and you can no longer see this\nissue by changing the exercise. All the exercises are now rendered in an iframe\non the exercise pages, so when you go to a different exercise, you're\neffectively \"closing\" the page, so all JS execution for that exercise stops."]}),"\n",(0,a.jsxs)(n.p,{children:["So I've added a little checkbox which you can use to mount and unmount the\ncomponent with ease. This has the benefit of also working on the isolated page\nas well. On the exercise page, you'll want to make sure that your console output\nis showing the output from the iframe by\n",(0,a.jsx)(n.a,{href:"https://developers.google.com/web/tools/chrome-devtools/console/reference#context",children:"selecting the right context"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"I've also added a test for this one to help make sure you've got it right."}),"\n",(0,a.jsxs)(n.p,{children:["Also notice that while what we're doing here is still useful and you'll learn\nvaluable skills, the warning we're suppressing\n",(0,a.jsx)(n.a,{href:"https://github.com/reactwg/react-18/discussions/82",children:"goes away in React v18"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Phew, ok, back to your extra credit!"}),"\n",(0,a.jsxs)(n.p,{children:["This one's a bit tricky, and I'm going to be intentionally vague here to give\nyou a bit of a challenge, but consider the scenario where we fetch a pokemon,\nand before the request finishes, we change our mind and navigate to a different\npage (or uncheck the mount checkbox). In that case, the component would get\nremoved from the page (\"unmounted\") and when the request finally does complete,\nit will call ",(0,a.jsx)(n.code,{children:"dispatch"}),", but because the component has been removed from the\npage, we'll get this warning from React:"]}),"\n","\n",(0,a.jsxs)(n.p,{children:["The best solution to this problem would be to\n",(0,a.jsx)(n.a,{href:"https://developers.google.com/web/updates/2017/09/abortable-fetch",children:"cancel the request"}),",\nbut even then, we'd have to handle the error and prevent the ",(0,a.jsx)(n.code,{children:"dispatch"})," from\nbeing called for the rejected promise."]}),"\n",(0,a.jsxs)(n.p,{children:["So see whether you can work out a solution for preventing ",(0,a.jsx)(n.code,{children:"dispatch"})," from being\ncalled if the component is unmounted. Depending on how you implement this, you\nmight need ",(0,a.jsx)(n.code,{children:"useRef"}),", ",(0,a.jsx)(n.code,{children:"useCallback"}),", and ",(0,a.jsx)(n.code,{children:"useEffect"}),"."]}),"\n",(0,a.jsx)(n.h2,{children:"\ud83e\udd89 Other notes"}),"\n",(0,a.jsxs)(n.h3,{children:[(0,a.jsx)(n.code,{children:"useEffect"})," and ",(0,a.jsx)(n.code,{children:"useCallback"})]}),"\n",(0,a.jsxs)(n.p,{children:["The use case for ",(0,a.jsx)(n.code,{children:"useCallback"})," in the exercise is a perfect example of the types\nof problems ",(0,a.jsx)(n.code,{children:"useCallback"})," is intended to solve. However the examples in these\ninstructions are intentionally contrived. You can simplify things a great deal\nby ",(0,a.jsx)(n.em,{children:"not"})," extracting code from ",(0,a.jsx)(n.code,{children:"useEffect"})," into functions that you then have to\nmemoize with ",(0,a.jsx)(n.code,{children:"useCallback"}),". Read more about this here:\n",(0,a.jsx)(n.a,{href:"https://epicreact.dev/myths-about-useeffect",children:"Myths about useEffect"}),"."]}),"\n",(0,a.jsxs)(n.h3,{children:[(0,a.jsx)(n.code,{children:"useCallback"})," use cases"]}),"\n",(0,a.jsxs)(n.p,{children:["The entire purpose of ",(0,a.jsx)(n.code,{children:"useCallback"})," is to memoize a callback for use in\ndependency lists and props on memoized components (via ",(0,a.jsx)(n.code,{children:"React.memo"}),", which you\ncan learn more about from the performance workshop). The ",(0,a.jsx)(n.em,{children:"only"})," time it's useful\nto use ",(0,a.jsx)(n.code,{children:"useCallback"})," is when the function you're memoizing is used in one of\nthose two situations."]}),"\n",(0,a.jsx)(n.h2,{children:"\ud83e\udd89 Feedback"}),"\n",(0,a.jsxs)(n.p,{children:["Fill out\n",(0,a.jsx)(n.a,{href:"https://ws.kcd.im/?ws=Advanced%20React%20Hooks%20%F0%9F%94%A5&e=02%3A%20useCallback%3A%20custom%20hooks&em=",children:"the feedback form"}),"."]})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c(e)}},3238:function(e,n,s){var a=s(4519),c=Symbol.for("react.element"),t=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,l=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function r(e,n,s){var a,t={},r=null,p=null;for(a in void 0!==s&&(r=""+s),void 0!==n.key&&(r=""+n.key),void 0!==n.ref&&(p=n.ref),n)o.call(n,a)&&!i.hasOwnProperty(a)&&(t[a]=n[a]);if(e&&e.defaultProps)for(a in n=e.defaultProps)void 0===t[a]&&(t[a]=n[a]);return{$$typeof:c,type:e,key:r,ref:p,props:t,_owner:l.current}}n.Fragment=t,n.jsx=r,n.jsxs=r},2556:function(e,n,s){e.exports=s(3238)}}]);
//# sourceMappingURL=108.a78ce763.chunk.js.map